import { v4 as uuidv4 } from "uuid";
import { getIpAddressInternal } from "../../../../client/users/getIpAddress";
import { generateLocationFromIpAddressInternal } from "../../../../client/users/getLocationFromIpAddress";
import { db } from "../../../../config/firebase";
import { vertexAI, visionModel } from "../../../../config/vertex";
import { HarmBlockThreshold, HarmCategory } from "@google-cloud/vertexai";
import { getNowDate, getNowString } from "../../../../const/datetime";
import { ConsumePointEventType, GeneralStatus } from "../../../../const/enum";
import { generativeModelDeductPeqacoinsInternal } from "../../user/points/check_and_deduct_peqacoins";
import { getPeqabooUserProfileInternal } from "../../user/get_peqaboo_user_details";
import { sendPushNotificationToPeqabooUsersInternal } from "../../user/send_push_to_peqaboo_users";

export const chargePeqacoins = 400;

export async function analyseLabreportInternal(lang: string, imgList: string[], petId: string, uid: string, reportId: string,): Promise<{ data: any, tokenUsed: any }> {
    const generativeVisionModel = vertexAI.getGenerativeModel({
        model: visionModel,
        safetySettings: [{
            category:
                HarmCategory.HARM_CATEGORY_UNSPECIFIED,
            threshold: HarmBlockThreshold.BLOCK_ONLY_HIGH,

        }],
        // generationConfig: { maxOutputTokens: 2000 },
        systemInstruction: {
            role: "system",
            parts: [{
                "text": `You are a knowledgeable AI assistant that analyzes lab reports provided by veterinarians. You will receive an image of a lab report and extract key-value pairs of the chemistry data into a Dart Map.

Please ensure the provided image is a lab report; if it is not, return an empty list. Use camelCase for the keys in the output.

Format the list of maps under the key "data," maintaining the order according to the table in the report for easy retrieval of values and measurement units for each item.

For each item, include:

labelName: The exact wording from the report.
commonName: A common name for the lab report.
nameId: in english camelCase, a unique identifier for the lab report item.
unit (in string): The unit of measurement for the lab report item in string.
value (in string): The numerical value of the lab report item, keep equality symbol only if exist in the source
minValue (in string): The minimum range value of the lab report item if available.
maxValue (in string): The maximum range value of the lab report item if available.
description: Explain what is the item in pet medical means, let the layman pet owner understand the item.
note: Insights related to the lab report, structured as a map with:
noteValue: A short string interpretation (avoid affirmative language; for example, use "within normal range" instead of "normal").
color: A color string indicating the level, which can be "green," "yellow," "red," "black," or "blue."
explanation: Interpret the value to let the pet owner understand easily.

Write all the response strings in language: ${lang}. If the language is Chinese, use only Traditional Chinese, avoiding Simplified Chinese.
Do not add json header footer markdown in the response, do not include any backslash  \`\`\`json at start or  \`\`\` at end.
Do not wrap the JSON code in JSON markers, and do not use markdown format. Return the JSON in the following structure:
{
  "success": boolean, // indicates whether the report is lab report and successfully parsed
  "title": string, // summary title of the lab report in ${lang}
  "category": string, // short English camelCase category of the lab report
  "summary": string, // brief summary of the lab report in ${lang}, if success false, explain why not able to parse as lab report.
  "description": string, // explain the findings and the next stpes to the pet owner, to comfort and prepare for the next step
  "patientName": string, // patient name, empty if not available
  "patientType": string, // pet type in ${lang}, empty if not available
  "clinicName": string, // clinic name, empty if not available
  "doctorName": string, // doctor name, empty if not available
  "documentDate": string, // date of the lab report in string (do not infer timezone), maybe in dd-MMM-yyy HH:mm format, empty if not available
  "items": list of maps, // extracted item data from the lab report, if success false return empty list
}
Current date time: ${new Date().toISOString()}

                `
            }]
        },
    });
    let petDataString = "";

    if (petId != "") {
        let petUsersSnapshot = await db.collection("petUsers").doc(petId).get();
        let petData = petUsersSnapshot.data();
        if (petData != null) {
            delete petData["petProfileImgUrl"]; //useless data
            delete petData["createdBy"]; //useless data
            delete petData["index"]; //useless data
            delete petData["petId"]; //useless data

        }
        petDataString = JSON.stringify(petUsersSnapshot.data());
    }

    let fileParts: any[] = [];
    let gsImgList: string[] = [];
    //modify img list
    for (let i = 0; i < imgList.length; i++) {
        if (imgList[i].startsWith("https://")) {
            let coreImgUrl = new URL(imgList[i]).pathname.slice(3);
            let gsPath = decodeURIComponent(coreImgUrl.replace("/b/decennium-global.appspot.com/o/", "gs://decennium-global.appspot.com/"));
            gsImgList.push(gsPath);
        } else {
            gsImgList.push(imgList[i]);
        }
    }

    for (const imgItem of gsImgList) {
        let filePart: any;
        if (imgItem.startsWith("gs://")) {
            filePart = { fileData: { fileUri: imgItem, mimeType: "image/jpeg" } };
        } else {
            filePart = { inlineData: { data: imgItem, mimeType: "image/jpeg" } };
        }
        fileParts.push(filePart);
    }

    const textPart = {
        text: `
                    ${petDataString != "" ? "This is the pet data in json stringified text: " + petDataString + "\n. For the summary text, try to relate to the pet data and elaborate the report findings, explain to the pet owner so that he/she understand the report and current suitation, and prepare for next step." : ""}
               Analyse the following image:
                `
    }
    let parts = [textPart, ...fileParts,];
    const request = {
        contents: [{
            role: "user", parts: parts
        }],
    };
    try {
        var tokenUsed = await generativeVisionModel.countTokens(request);
        var streamingResult = await generativeVisionModel.generateContent(request);
        const aggregatedResponse = streamingResult.response;

        let data: any = {};

        if (aggregatedResponse?.candidates && aggregatedResponse.candidates.length > 0) {
            let text: string = aggregatedResponse.candidates[0].content.parts[0].text ?? "";

            try {

                let formattedText = text
                    .replace(/'/g, "")
                    .trim();
                data = JSON.parse(formattedText);

                if (data.success == true) {


                    await db.collection("report").doc(reportId).set({

                        isGenerating: false,
                        isSuccess: true,
                        tokenUsed: tokenUsed,
                        ...{
                            data,
                        },
                        updateAt: getNowString(),
                        updateAtDate: getNowDate(),
                    }, {
                        merge: true
                    });

                    //deduct point
                    await generativeModelDeductPeqacoinsInternal(
                        uid,
                        chargePeqacoins * imgList.length,
                        ConsumePointEventType.anaylseLabReport,);

                    await sendPetReportNotification(
                        uid,
                        lang,
                        reportId
                    );
                } else {
                    await db.collection("report").doc(reportId).set({
                        isGenerating: false,
                        isSuccess: false,
                        tokenUsed: tokenUsed,
                        updateAt: getNowString(),
                        updateAtDate: getNowDate(),
                    }, { merge: true });
                }

            } catch (error) {
                console.log("errortext", text);
                console.error("Error parsing contentFinal as JSON:", error);
                data = {
                    error: error
                };
            }


        }
        return { data, tokenUsed };
    } catch (error) {
        console.error("Error parsing contentFinal as JSON:", error);
        throw error;

    }


}


export const analyseLabReport = async (req: {
    body: {
        lang: string,
        imgList: string[],
        petId: string,
        uid: string,
        reportId: string,
    }
}, res: any) => {
    const { lang, imgList, petId, uid, reportId } = req.body;

    var userProfile = await getPeqabooUserProfileInternal(uid);
    var currentPoint = userProfile.currentPoint;

    if (currentPoint < (chargePeqacoins * imgList.length)) {
        return res.status(500).send({
            success: false,
            enoughPoint: false,
            deductedPoint: 0,
        });
    }



    try {

        const ipAddress = await getIpAddressInternal(req);

        let getCountry;
        let getCountryCode;
        let getCity;
        let getIpData;
        if (ipAddress != null && ipAddress != "") {
            const { country, countryCode, city, ipData, } = await generateLocationFromIpAddressInternal(ipAddress);

            getCountry = country;
            getCountryCode = countryCode;
            getCity = city;
            getIpData = ipData;

        }
        let getReportId = reportId;
        if (getReportId == "") {
            getReportId = uuidv4();
        }
        await db.collection("report").doc(getReportId).set({
            lang: lang,
            imgList: imgList,
            petId: petId,
            uid: uid,
            ipAddress: ipAddress,
            country: getCountry,
            countryCode: getCountryCode,
            city: getCity,
            ipData: getIpData,
            createdAt: getNowString(),
            createdAtDate: getNowDate(),
            updateAt: getNowString(),
            updateAtDate: getNowDate(),
            isGenerated: true,
            isGenerating: true,
            isSuccess: true,
            status: GeneralStatus.active,
        }, {
            merge: true
        });


        analyseLabreportInternal(lang, imgList, petId, uid, reportId);


        return res.status(200).send({
            success: true,
            enoughPoint: true,
            deductedPoint: chargePeqacoins * imgList.length,
            reportId: getReportId,
            lang: lang,
        });
    }
    catch (error) {
        console.error("Error:", error);
        return res.status(500).send({
            success: false,
            message: error
        });
    }
}

async function sendPetReportNotification(uid: string, lang: string, reportId: string) {
    const notificationString: {
        title: { [key: string]: string };
        body: { [key: string]: string };

    } = {
        title: {
            en: "📄 Your pet report is analysed!",
            zh: "📄 您的寵物報告已完成分析！",
            ja: "📄 あなたのペットレポートが分析されました！",
            ko: "📄 당신의 애완 동물 보고서가 분석되었습니다!",
            th: "📄 รายงานสัตว์เลี้ยงของคุณถูกวิเคราะห์แล้ว!",
            es: "📄 ¡Se ha analizado su informe de mascotas",

        },
        body: {
            en: "Your pet report is ready! Click to view the details.",
            zh: "您的寵物報告已準備好！點擊查看詳情。",
            ja: "あなたのペットレポートが準備されました！詳細を表示するにはクリックしてください。",
            ko: "당신의 애완 동물 보고서가 준비되었습니다! 자세한 내용을 확인하려면 클릭하십시오.",
            th: "รายงานสัตว์เลี้ยงของคุณพร้อมแล้ว! คลิกเพื่อดูรายละเอียด",
            es: "¡Su informe de mascotas está listo! Haga clic para ver los detalles.",

        },

    };

    await sendPushNotificationToPeqabooUsersInternal({
        uidList: [uid],
        notificationTitle: notificationString.title[lang] || notificationString.title.en,
        notificationBody: notificationString.body[lang] || notificationString.body.en,
        messageBody: notificationString.body[lang] || notificationString.body.en,
        path: `/pet/report/view-report/${reportId}`,
        notificationImgUrl: "",
        sound: "default",
        type: "pet_report_generated_notification",
        data: {
            recipeId: reportId,
            adminId: "system",
        },
        silent: true,
    });
}
